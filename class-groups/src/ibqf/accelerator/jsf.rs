// Author: dWallet Labs, Ltd.
// SPDX-License-Identifier: CC-BY-NC-ND-4.0

use crypto_bigint::subtle::ConstantTimeEq;
use crypto_bigint::{ConstantTimeSelect, Uint};

/// Joint Sparse Form.
pub(crate) struct JointSparseForm(Vec<u8>);

impl JointSparseForm {
    /// Create a new JSF.
    /// Variable time in `size`.
    ///
    /// Ref: Code lifted verbatim from [BICYCL](https://gite.lirmm.fr/crypto/bicycl/-/blob/e970dd8becd016f5193459f5952988b8b9f828aa/src/bicycl/gmp_extras.inl#L1576).
    #[allow(clippy::needless_range_loop)]
    pub(crate) fn new<const LIMBS: usize>(n0: &Uint<LIMBS>, n1: &Uint<LIMBS>, size: u32) -> Self {
        let vec_len = size as usize;
        let mut vec = vec![0u8; vec_len];

        // three-bit window for n0 and n1
        let mut n0_window = (
            Self::bit_value(n0, 0),
            Self::bit_value(n0, 1),
            Self::bit_value(n0, 2),
        );
        let mut n1_window = (
            Self::bit_value(n1, 0),
            Self::bit_value(n1, 1),
            Self::bit_value(n1, 2),
        );

        let (mut u0, mut u1);
        let (mut d0, mut d1) = (0, 0);
        for (j, val) in vec.iter_mut().enumerate() {
            // bi := (d_i + 2 * ni.1 + ni.0) % 4 == 2.
            let b0 = (d0 ^ n0_window.0 ^ 1u8) & (n0_window.1 ^ d0);
            let b1 = (d1 ^ n1_window.0 ^ 1u8) & (n1_window.1 ^ d1);

            // Update d0 and u0
            let update = d0.ct_ne(&n0_window.0);
            let new_d0 = n0_window.1 ^ ((n0_window.2 ^ n0_window.1) & b1);
            d0 = u8::ct_select(&d0, &new_d0, update);
            u0 = u8::ct_select(&0, &(1 + (d0 << 1)), update);

            // Update d1 and u1
            let update = d1.ct_ne(&n1_window.0);
            let new_d1 = n1_window.1 ^ ((n1_window.2 ^ n1_window.1) & b0);
            d1 = u8::ct_select(&d1, &new_d1, update);
            u1 = u8::ct_select(&0, &(1 + (new_d1 << 1)), update);

            *val = (u1 << 4) | u0;

            // Slide windows over by 1 bit.
            n0_window = (n0_window.1, n0_window.2, Self::bit_value(n0, j as u32 + 3));
            n1_window = (n1_window.1, n1_window.2, Self::bit_value(n1, j as u32 + 3));
        }

        Self(vec)
    }

    /// Get value of this form at `idx`, or `0` if `idx` is out of bounds.
    pub(crate) fn get(&self, idx: usize) -> u8 {
        self.0.get(idx).cloned().unwrap_or(0u8)
    }

    /// Returns the value of `n` at bit `idx`, or `0` if `idx` is out of bounds.
    fn bit_value<const LIMBS: usize>(n: &Uint<LIMBS>, idx: u32) -> u8 {
        n.bit_vartime(idx) as u8
    }

    /// The size of this form.
    pub(crate) fn size(&self) -> usize {
        self.0.len()
    }
}

#[cfg(test)]
mod tests {
    use crypto_bigint::U2048;

    use crate::ibqf::accelerator::jsf::JointSparseForm;

    #[test]
    fn regression_test() {
        let n0 = U2048::from_be_hex(concat![
            "47a3ad3b6f9ee0f518246dcc6be7dc07b515d2a800274e87990034e716715fd4",
            "feadaa5eab20875a71fab5c2cd69d3efcd7a07474b82f1ea64ef8e1ef5033ca0",
            "ae8d86a3b143185112a2078d12cc930a936ac7356eb04255b7bd48f4031164c1",
            "8d6b01f070536f83362a45035bbcfd25544d4784da83b81ac1891056e66728a0",
            "ef63c8c33ccbeb2e21e6464da1b4597e4bb6d19d3076e1ab1350cadb752fec39",
            "c00444debc797ef46ff7f7c63fb50d07fe3f4d88536daf91a567bf551efcd54a",
            "a4373b17e3205665267b0daf5ded8f2a3e02af0649766b5086097e116cee4738",
            "0c6da080e693814235433360781a33cb911507ca33227683ff049b3819140236"
        ]);
        let n1 = U2048::from_be_hex(concat![
            "4a0a2ebe71362f8b17d44b0137e90cd3b125268c8ba1410dee9f32ea0d2e7c3f",
            "234ae9a4710efd6a1e61c9a9180752e94dc36edd7b2e5a9920db645514886188",
            "3330356b49d109753fe1fffa1fcf83ddb4c084562e06eec82490497b0b458b19",
            "dd424608f425d44c6cfecbeb8985ee8dd448382961477523aef0c3c5d62f0c78",
            "bbea483b71c05be875f42e46f0c22cea834beb1a5e8d51d032e7f4732dfe454e",
            "7bf644e584cc4d15587ce3c1e956effc7172dcca3cc89206791ecc72d528a5ee",
            "c86c653638962a1ae47cfdaddcf32e29fa8292ac3d92147b8b1a3e4f410bd587",
            "b9f24d684c078504820aa8bbfdf7fb9eb5c2503c5861c0fc5841b61e114fb20e"
        ]);

        let jsf = JointSparseForm::new(&n0, &n1, U2048::BITS + 1);
        let arr: [u8; U2048::BITS as usize + 1] = jsf.0.try_into().unwrap();

        let exp_res: [u8; U2048::BITS as usize + 1] = [
            0, 51, 0, 3, 16, 0, 1, 0, 0, 17, 0, 0, 48, 0, 48, 0, 0, 0, 1, 0, 17, 0, 16, 0, 17, 0,
            0, 1, 17, 0, 0, 0, 0, 48, 0, 3, 0, 16, 1, 0, 1, 49, 0, 51, 0, 3, 51, 0, 3, 19, 0, 1, 0,
            0, 16, 0, 3, 0, 0, 48, 0, 48, 0, 16, 0, 0, 49, 0, 0, 0, 0, 3, 19, 0, 0, 3, 0, 0, 48, 1,
            0, 17, 0, 0, 0, 49, 0, 16, 3, 0, 3, 51, 0, 16, 17, 0, 0, 3, 51, 0, 1, 0, 19, 0, 0, 0,
            0, 1, 16, 0, 16, 0, 3, 19, 0, 3, 0, 1, 48, 0, 1, 48, 0, 48, 1, 0, 16, 19, 0, 48, 3, 0,
            3, 19, 0, 48, 0, 0, 49, 0, 3, 0, 1, 0, 0, 1, 0, 51, 0, 1, 0, 0, 0, 48, 0, 3, 0, 0, 0,
            1, 0, 0, 48, 0, 0, 1, 49, 0, 19, 0, 3, 19, 0, 48, 49, 0, 51, 0, 49, 0, 16, 0, 1, 0, 3,
            19, 0, 3, 0, 0, 1, 16, 0, 1, 16, 0, 0, 0, 1, 0, 17, 0, 16, 0, 0, 0, 0, 51, 0, 0, 3, 19,
            0, 1, 0, 1, 0, 1, 49, 0, 48, 51, 0, 16, 1, 0, 0, 16, 0, 48, 0, 49, 0, 48, 0, 0, 48, 49,
            0, 19, 0, 19, 0, 0, 51, 0, 0, 1, 0, 48, 51, 0, 1, 0, 48, 0, 0, 0, 0, 19, 0, 0, 3, 51,
            0, 48, 0, 49, 0, 48, 1, 0, 0, 3, 48, 0, 19, 0, 0, 0, 17, 0, 3, 0, 3, 0, 48, 51, 0, 1,
            0, 0, 17, 0, 16, 0, 0, 51, 0, 0, 0, 0, 16, 3, 0, 17, 0, 49, 0, 16, 0, 0, 16, 19, 0, 17,
            0, 0, 0, 49, 0, 0, 48, 0, 1, 0, 3, 19, 0, 0, 19, 0, 19, 0, 0, 1, 0, 19, 0, 3, 16, 0, 0,
            51, 0, 49, 0, 1, 0, 0, 17, 0, 0, 1, 49, 0, 48, 0, 48, 0, 51, 0, 16, 0, 19, 0, 1, 17, 0,
            17, 0, 0, 0, 0, 0, 16, 0, 19, 0, 48, 0, 0, 1, 0, 0, 17, 0, 17, 0, 17, 0, 0, 3, 48, 0,
            0, 49, 0, 48, 51, 0, 3, 16, 0, 51, 0, 0, 0, 48, 51, 0, 0, 0, 51, 0, 3, 0, 48, 0, 0, 51,
            0, 51, 0, 0, 51, 0, 0, 1, 0, 0, 0, 19, 0, 51, 0, 0, 0, 0, 17, 0, 1, 17, 0, 0, 49, 0, 0,
            49, 0, 49, 0, 0, 19, 0, 1, 0, 19, 0, 19, 0, 19, 0, 1, 0, 48, 0, 48, 0, 17, 0, 16, 3, 0,
            1, 48, 0, 3, 16, 0, 0, 48, 0, 51, 0, 1, 16, 0, 19, 0, 19, 0, 0, 16, 17, 0, 3, 0, 16,
            19, 0, 16, 17, 0, 0, 0, 1, 16, 0, 3, 51, 0, 51, 0, 3, 0, 49, 0, 1, 0, 3, 51, 0, 19, 0,
            19, 0, 16, 1, 0, 3, 16, 0, 16, 0, 0, 19, 0, 16, 0, 48, 49, 0, 0, 49, 0, 17, 0, 49, 0,
            3, 19, 0, 0, 48, 0, 16, 0, 51, 0, 48, 0, 0, 1, 0, 19, 0, 1, 17, 0, 1, 48, 0, 1, 0, 19,
            0, 49, 0, 16, 1, 0, 0, 3, 0, 16, 0, 0, 19, 0, 3, 16, 0, 3, 0, 16, 3, 0, 16, 19, 0, 0,
            49, 0, 1, 0, 17, 0, 0, 16, 0, 17, 0, 0, 16, 19, 0, 3, 48, 0, 3, 51, 0, 3, 48, 0, 16, 0,
            48, 0, 1, 48, 0, 19, 0, 0, 48, 0, 0, 16, 0, 0, 48, 1, 0, 0, 0, 0, 1, 0, 3, 0, 49, 0, 0,
            0, 49, 0, 3, 51, 0, 16, 19, 0, 16, 0, 0, 16, 0, 48, 1, 0, 0, 19, 0, 1, 0, 0, 51, 0, 0,
            0, 16, 3, 0, 48, 0, 0, 16, 0, 48, 3, 0, 0, 0, 16, 0, 0, 0, 16, 19, 0, 48, 49, 0, 16,
            17, 0, 19, 0, 0, 0, 19, 0, 48, 0, 16, 0, 16, 3, 0, 3, 51, 0, 16, 0, 16, 17, 0, 0, 19,
            0, 0, 0, 1, 49, 0, 51, 0, 16, 0, 51, 0, 0, 17, 0, 17, 0, 0, 0, 17, 0, 0, 16, 17, 0, 48,
            0, 0, 0, 0, 0, 48, 0, 0, 0, 3, 16, 0, 49, 0, 3, 16, 0, 17, 0, 16, 0, 19, 0, 3, 0, 16,
            0, 0, 48, 0, 0, 3, 0, 1, 0, 3, 51, 0, 3, 48, 0, 48, 51, 0, 0, 19, 0, 48, 3, 0, 16, 3,
            0, 19, 0, 49, 0, 3, 0, 1, 0, 0, 48, 49, 0, 1, 0, 51, 0, 17, 0, 49, 0, 16, 0, 3, 0, 3,
            0, 19, 0, 51, 0, 0, 17, 0, 0, 48, 51, 0, 16, 19, 0, 16, 19, 0, 0, 0, 17, 0, 48, 0, 0,
            1, 49, 0, 48, 49, 0, 51, 0, 0, 17, 0, 1, 49, 0, 48, 0, 49, 0, 3, 0, 3, 0, 16, 19, 0, 0,
            19, 0, 48, 0, 19, 0, 1, 0, 1, 16, 0, 19, 0, 16, 0, 48, 0, 1, 17, 0, 16, 19, 0, 19, 0,
            1, 0, 16, 1, 0, 3, 0, 51, 0, 16, 1, 0, 0, 48, 1, 0, 1, 49, 0, 1, 17, 0, 0, 17, 0, 0,
            51, 0, 1, 48, 0, 17, 0, 0, 1, 17, 0, 48, 3, 0, 0, 0, 49, 0, 48, 0, 1, 0, 16, 0, 3, 0,
            48, 51, 0, 1, 0, 3, 0, 51, 0, 3, 48, 0, 16, 0, 0, 3, 0, 1, 0, 51, 0, 3, 19, 0, 0, 48,
            0, 3, 51, 0, 0, 49, 0, 0, 0, 19, 0, 1, 0, 0, 17, 0, 0, 19, 0, 0, 48, 49, 0, 48, 3, 0,
            3, 0, 0, 48, 0, 3, 0, 48, 0, 17, 0, 0, 48, 0, 1, 0, 17, 0, 0, 16, 17, 0, 1, 0, 0, 51,
            0, 0, 3, 51, 0, 16, 1, 0, 51, 0, 49, 0, 51, 0, 0, 3, 48, 0, 19, 0, 1, 49, 0, 0, 0, 16,
            0, 1, 0, 48, 0, 17, 0, 0, 1, 48, 0, 0, 1, 49, 0, 0, 0, 48, 0, 51, 0, 3, 0, 19, 0, 0,
            17, 0, 0, 16, 0, 48, 51, 0, 0, 3, 48, 0, 0, 1, 16, 0, 0, 48, 49, 0, 17, 0, 3, 0, 51, 0,
            16, 17, 0, 1, 16, 0, 16, 0, 3, 0, 0, 0, 49, 0, 0, 17, 0, 1, 0, 1, 17, 0, 0, 17, 0, 0,
            0, 17, 0, 17, 0, 49, 0, 3, 51, 0, 3, 19, 0, 3, 19, 0, 51, 0, 0, 48, 0, 0, 0, 3, 51, 0,
            16, 0, 0, 3, 48, 0, 48, 51, 0, 16, 3, 0, 51, 0, 0, 49, 0, 48, 0, 0, 0, 1, 0, 49, 0, 16,
            0, 49, 0, 48, 1, 0, 1, 0, 1, 0, 0, 48, 51, 0, 3, 48, 0, 3, 19, 0, 0, 49, 0, 16, 0, 16,
            3, 0, 0, 16, 0, 19, 0, 48, 3, 0, 16, 17, 0, 3, 19, 0, 1, 0, 0, 16, 0, 51, 0, 0, 1, 16,
            0, 0, 16, 3, 0, 0, 0, 0, 49, 0, 16, 0, 0, 16, 0, 1, 17, 0, 1, 0, 1, 17, 0, 17, 0, 51,
            0, 1, 48, 0, 3, 0, 17, 0, 48, 0, 16, 3, 0, 49, 0, 49, 0, 16, 3, 0, 51, 0, 49, 0, 16, 1,
            0, 16, 0, 51, 0, 49, 0, 16, 0, 0, 0, 48, 0, 49, 0, 3, 0, 0, 16, 17, 0, 0, 17, 0, 0, 17,
            0, 1, 0, 3, 0, 16, 0, 3, 16, 0, 0, 16, 3, 0, 16, 3, 0, 0, 3, 0, 19, 0, 1, 49, 0, 48, 1,
            0, 0, 48, 0, 1, 0, 48, 0, 0, 16, 3, 0, 3, 0, 3, 48, 0, 0, 51, 0, 16, 3, 0, 51, 0, 51,
            0, 16, 17, 0, 3, 0, 16, 1, 0, 0, 1, 17, 0, 1, 0, 1, 0, 1, 49, 0, 19, 0, 17, 0, 49, 0,
            48, 1, 0, 49, 0, 1, 0, 48, 0, 0, 3, 0, 17, 0, 1, 0, 0, 49, 0, 0, 3, 0, 17, 0, 51, 0, 3,
            0, 1, 0, 1, 16, 0, 0, 3, 19, 0, 48, 1, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0,
            49, 0, 1, 0, 1, 0, 0, 1, 0, 16, 0, 17, 0, 16, 0, 49, 0, 1, 48, 0, 16, 0, 19, 0, 1, 0,
            0, 19, 0, 1, 0, 16, 0, 49, 0, 1, 16, 0, 16, 3, 0, 19, 0, 48, 0, 49, 0, 48, 1, 0, 49, 0,
            51, 0, 49, 0, 0, 16, 3, 0, 3, 0, 0, 49, 0, 48, 49, 0, 3, 16, 0, 51, 0, 19, 0, 1, 0, 0,
            16, 0, 1, 0, 49, 0, 16, 3, 0, 0, 16, 17, 0, 3, 0, 1, 16, 0, 0, 0, 16, 1, 0, 17, 0, 19,
            0, 0, 0, 19, 0, 16, 0, 48, 49, 0, 16, 0, 3, 16, 0, 1, 48, 0, 51, 0, 0, 48, 0, 3, 48, 0,
            0, 17, 0, 1, 0, 0, 19, 0, 3, 19, 0, 1, 49, 0, 19, 0, 16, 0, 17, 0, 16, 19, 0, 16, 0, 1,
            49, 0, 0, 48, 0, 48, 51, 0, 0, 51, 0, 1, 0, 3, 51, 0, 48, 0, 1, 0, 48, 1, 0, 51, 0, 0,
            1, 48, 0, 0, 48, 0, 3, 19, 0, 0, 0, 48, 3, 0, 51, 0, 0, 17, 0, 19, 0, 16, 0, 0, 48, 51,
            0, 0, 0, 48, 0, 17, 0, 17, 0, 19, 0, 48, 1, 0, 17, 0, 3, 0, 3, 0, 3, 0, 16, 17, 0, 3,
            0, 19, 0, 1, 16, 0, 48, 51, 0, 0, 19, 0, 19, 0, 0, 51, 0, 1, 17, 0, 3, 0, 48, 0, 16, 0,
            49, 0, 0, 3, 16, 0, 1, 0, 17, 0, 19, 0, 51, 0, 51, 0, 48, 0, 1, 0, 0, 0, 1, 48, 0, 0,
            0, 16, 1, 0, 0, 19, 0, 3, 0, 51, 0, 1, 17, 0, 3, 16, 0, 0, 19, 0, 49, 0, 17, 0, 17, 0,
            49, 0, 1, 49, 0, 51, 0, 19, 0, 19, 0, 51, 0, 16, 0, 0, 16, 0, 0, 49, 0, 1, 0, 1, 0, 19,
            0, 0, 0, 48, 0, 0, 3, 0, 19, 0, 49, 0, 0, 51, 0, 48, 49, 0, 51, 0, 1, 17, 0, 0, 0, 3,
            16, 0, 17, 0, 51, 0, 0, 49, 0, 17, 0, 51, 0, 17, 0, 48, 0, 0, 0, 0, 16, 0, 48, 49, 0,
            0, 1, 49, 0, 0, 3, 0, 48, 0, 1, 16, 0, 0, 3, 19, 0, 0, 0, 1, 0, 17, 0, 19, 0, 0, 1, 0,
            17, 0, 48, 0, 0, 48, 0, 16, 0, 0, 16, 0, 0, 16, 17, 0, 1, 0, 17, 0, 49, 0, 48, 49, 0,
            19, 0, 48, 51, 0, 19, 0, 17, 0, 0, 17, 0, 1, 0, 51, 0, 51, 0, 0, 0, 48, 49, 0, 48, 0,
            0, 16, 0, 51, 0, 16, 3, 0, 0, 16, 0, 0, 17, 0, 51, 0, 0, 0, 0, 1, 49, 0, 1, 17, 0, 16,
            0, 3, 0, 1, 0, 3, 0, 16, 19, 0, 16, 3, 0, 16, 1, 0, 0, 17, 0, 48, 49, 0, 0, 0, 0, 0,
            51, 0, 17, 0, 0, 49, 0, 49, 0, 19, 0, 0, 48, 1, 0, 0, 0, 16, 19, 0, 0, 3, 48, 0, 48, 0,
            3, 19, 0, 16, 0, 0, 0, 51, 0, 0, 19, 0, 48, 3, 0, 0, 0, 49, 0, 49, 0, 3, 0, 51, 0, 19,
            0, 0, 48, 49, 0, 16, 1, 0, 3, 0, 16, 0, 17, 0, 0, 17, 0, 0,
        ];
        assert_eq!(arr, exp_res);
    }
}
